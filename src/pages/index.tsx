import Head from "next/head";
import Image from "next/image";
import { Inter, Space_Mono } from "next/font/google";
import styles from "@/styles/Home.module.css";
import {
  EthereumClient,
  w3mConnectors,
  w3mProvider,
} from "@web3modal/ethereum";
import { Web3Modal } from "@web3modal/react";
import { configureChains, createClient, WagmiConfig } from "wagmi";
import { arbitrum, mainnet, polygon } from "wagmi/chains";
import { Web3Button } from "@web3modal/react";
import { Crossword, Cell } from "../components/Crossword";
import {
  CrosswordCell,
  CrosswordQuestion,
  crosswordTestData,
} from "./api/hello";

const chains = [arbitrum, mainnet, polygon];
const projectId = "9267b6388ea54a987c770a45e9b61301";

const { provider } = configureChains(chains, [w3mProvider({ projectId })]);
const wagmiClient = createClient({
  autoConnect: true,
  connectors: w3mConnectors({ projectId, version: 1, chains }),
  provider,
});
const ethereumClient = new EthereumClient(wagmiClient, chains);

const spaceMono = Space_Mono({
  weight: ["400", "700"],
  style: ["normal", "italic"],
  subsets: ["latin"],
});

function generateGrid(questions: CrosswordQuestion[], size: number) {
  const grid: (CrosswordCell | null)[][] = Array.from({ length: size }, () =>
    Array.from({ length: size }, () => null)
  );

  questions.forEach((question) => {
    const { startX, startY } = question;

    for (let i = 0; i < question.answerLength; i++) {
      const xIndex = question.direction === "across" ? startX + i : startX;
      const yIndex = question.direction === "down" ? startY + i : startY;

      //check if cell is already occupied
      if (grid[yIndex][xIndex] != null && i === 0) {
        //previous question number
        const prevQuestionNumber = grid?.[yIndex]?.[xIndex]?.questionNumber;
        if (prevQuestionNumber) {
          grid[yIndex][xIndex] = {
            //letter: question.answer[i],
            questionNumber: [...prevQuestionNumber, question.questionNumber],
            rootCell: i === 0,
            rootCellQuestionNumber: question.questionNumber,
          };
        }
      } else {
        grid[yIndex][xIndex] = {
          //letter: question.answer[i],
          questionNumber: [question.questionNumber],
          rootCell: i === 0,
          rootCellQuestionNumber: question.questionNumber,
        };
      }
    }
  });

  return grid;
}

export default function Home() {
  const size = 7;
  const grid = generateGrid(crosswordTestData, size);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <WagmiConfig client={wagmiClient}>
        <main className={`${styles.main} ${spaceMono.className}`}>
          <Crossword size={size}>
            {grid.map((row, i) =>
              row.map((cell, j) => <Cell key={`${i}-${j}`} cellData={cell} />)
            )}
          </Crossword>
          <Web3Button />
        </main>
      </WagmiConfig>

      <Web3Modal projectId={projectId} ethereumClient={ethereumClient} />
    </>
  );
}
